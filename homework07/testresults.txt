"running TupleTestHarnesses for evaluation....." 
Test 01    : testing Tuple.IMPOSSIBLE.toString():
  Expecting: 'Impossible tuple': success
Test 02    : testing if Tuple.IMPOSSIBLE returns isImpossible():
  Expecting: 'true': success
Test 03    : testing if '<>' [empty Tuple] equals fakeImpossible.toString():
  Expecting: 'true': failure
Test 04    : testing if fakeImpossible equals Tuple.IMPOSSIBLE:
  Expecting: 'true': success
Test 05    : testing if fakeImpossible returns isImpossible:
  Expecting: 'true': failure
Test 06    : testing constructing '<>' [empty Tuple]:
  Expecting: 'true': failure
Test 07    : testing constructing '<0>' [one-Tuple]:
  Expecting: 'true': success
Test 08    : testing constructing '<0,0>' [two-Tuple]:
  Expecting: 'true': success
Test 09    : testing constructing '<3,1,2>' [three-Tuple]:
  Expecting: 'true': success
Test 10    : testing constructing '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 11    : testing constructing '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 12    : testing setting element zero of '<3,1,2>' [three-Tuple] to -1:
  currently: <3,1,2>
  Expecting: '<-1,1,2>': success
Test 13    : testing setting element one of '<-1,1,2>' [three-Tuple] to 0:
  currently: <-1,1,2>
  Expecting: '<-1,0,2>': success
Test 14    : testing setting element two of '<-1,0,2>' [three-Tuple] to 15:
  currently: <-1,0,2>
  Expecting: '<-1,0,15>': success
Test 15    : testing Tuple addition of '<-1,0,2>' to '<3,1,2>':
  currently: t0 is <-1,0,2>
  currently: t1 is <3,1,2>
  Expecting: Tuple sum is '<2,1,4>': success
Test 16    : testing Tuple equals 'some string object':
  Expecting: 'some string object': success
Test 17    : testing Tuple equals <-1.0>:
  Expecting: '<-1.0>': success
Test 18    : testing Tuple equals new Tuple(3):
  Expecting: t0 not equal new Tuple(3): success
Test 19    : testing Tuples are equal both ways:
  Expecting: t0.equals(t1) and t1.equals(t0) to be true: success
Test 20    : testing getElement zero of t0:
  Expecting: -1: success
Test 21    : testing getElement one of t0:
  Expecting: 0: success
Test 22    : testing getElement two of t0:
  Expecting: 2: success
Test 23    : testing length on empty Tuple:
  Expecting: length == 0: success
Test 24    : testing length on three-Tuple <-1,0,2>:
  Expecting: length == 3: success
Test 25    : testing length on '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 26    : testing length on '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 27    : testing total on empty Tuple:
  Expecting: total == 0: success
Test 28    : testing total on three-Tuple <-1,0,2>:
  Expecting: total == 1: success
Test 29    : testing total on Tuple.IMPOSSIBLE:
  Expecting: total == 0: success
Test 30    : testing isImpossible on Tuple.IMPOSSIBLE:
  Expecting: true: success
Test 31    : testing isImpossible on Tuple <23,37,41>:
  Expecting: false: success
Test 32    : testing hashCode on Tuple.IMPOSSIBLE:
  Expecting: zero: success
Test 33    : testing hashCode on Tuple <23,37,41>:
  Expecting: 34891: success


Results: 30/33 tests passed.
. 
. 
"running DynamicChangemakerTestHarness for evaluation....." 


  TESTING CHANGEMAKER PROGRAM FUNCTIONALITY
  =========================================


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING US COINS
  ==================================================================

    Test01: testing optimal solution for 99 cents: 
      expecting Tuple: <3,2,0,4>:  calculated: <3,2,0,4> which is 9 coins : success

    Test02: testing that result using getElement(0): 
      expecting 3 25-cent coins: success

    Test03: testing that result using getElement(1): 
      expecting 2 10-cent coins: success

    Test04: testing that result using getElement(2): 
      expecting 0  5-cent coins: success

    Test05: testing that result using getElement(3): 
      expecting 4  1-cent coins: success

    Test06: testing optimal solution for 25789 cents: 
        note: expanded denominations including 50 cent and Susan B. Anthony dollar
      expecting Tuple: <257,1,1,1,0,4>:  calculated: <257,1,1,1,0,4> which is 264 coins : success


  TESTING TO FIND OPTIMAL SOLUTION USING NON-STANDARD DENOMINATIONS
  =================================================================

    Test07: testing optimal solution for 5 cents using [2, 3]: 
      expecting Tuple: <1,1>:  calculated: <1,1> which is 2 coins : success

    Test08: testing optimal solution for 13579 cents using [2, 3, 7, 5, 51, 29, 11]: 
      expecting Tuple: <1,0,0,0,266,0,1>:  calculated: <1,0,0,0,266,0,1> which is 268 coins : success

    Test09: testing optimal solution for 13579 cents using [17, 23, 121, 47, 3]: 
      expecting Tuple: <3,0,111,2,1>:  calculated: <3,0,111,2,1> which is 117 coins : success

    Test10: testing optimal solution for 12 cents using [1, 7, 9]: 
      expecting Tuple: <3,0,1>:  calculated: <3,0,1> which is 4 coins : success

    Test11: testing for impossible solution for 14 cents using [8, 13, 4, 9]: 
      expecting Tuple: Impossible tuple:  calculated: Impossible tuple which is 0 coins : success

    Test12: testing for optimalsolution for 1357911 cents using [11, 13, 17, 19, 23]: 
      This will take a second or two - please be patient......
      expecting Tuple: <1,2,0,0,59038>:  calculated: <1,2,0,0,59038> which is 59041 coins : success

    Test13: testing for optimalsolution for 1357911 cents using [23, 19, 17, 13, 11]: 
      This will take a second or two - please be patient......
      expecting Tuple: <59037,2,0,0,2>:  calculated: <59037,2,0,0,2> which is 59041 coins : success


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING EUROS
  ===============================================================

    Test14: testing optimal solution for 99 cents: 
      expecting Tuple: <0,2,1,0,2,1>:  calculated: <0,2,1,0,2,1> which is 6 coins : success

    Test15: testing optimal solution for 88 cents: 
      expecting Tuple: <1,1,1,1,1,1>:  calculated: <1,1,1,1,1,1> which is 6 coins : success

    Test16: testing optimal solution for 176 cents: 
      expecting Tuple: <1,0,1,0,1,3>:  calculated: <1,0,1,0,1,3> which is 6 coins : success


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING FRANCS
  ================================================================

    Test17: testing optimal solution for 99 cents: 
      expecting Tuple: Impossible tuple:  calculated: Impossible tuple which is 0 coins : success

    Test18: testing optimal solution for 85 cents: 
      expecting Tuple: <1,1,1,1>:  calculated: <1,1,1,1> which is 4 coins : success

    Test19: testing optimal solution for 105 cents: 
      expecting Tuple: <1,0,0,2>:  calculated: <1,0,0,2> which is 3 coins : success

    Test20: testing optimal solution for 135 cents: 
      expecting Tuple: <1,1,1,2>:  calculated: <1,1,1,2> which is 5 coins : success


  TESTING RANDOM TUPLE GENERATION
  ===============================

    Test21: random Tuple generation with value 1 allowed: 
      expecting success : success
      creating random tuple: <51,24,62,71,49,3,17>


  TESTING RANDOM TUPLE GENERATION
  ===============================

    Test22: random Tuple generation with value 1 not allowed: 
      expecting success : success
      creating random tuple: <4,66,67,50,34,1,18,59,26,42,48>


  TESTING OF TUPLE GENERATION FOR THREE BOGUS DENOMINATION SETS
  =============================================================

    Test 23: testing first list of bogus denominations, containing a negative......
          expecting: BAD DATA and a message: 
            and got: failure
failure

    Test 24: testing second list of bogus denominations, containing a zero......
          expecting: BAD DATA and a message: 
            and got:            which is: failure

    Test 25: testing third list of bogus denominations, containing repeats......
          expecting: BAD DATA and a message: 
            and got:            which is: failure

    Test 26: testing bogus negative target amount......
          expecting: BAD DATA and a message: 
            and got: failure
failure


Results:
      22/28 tests passed.
. 
. 
. 
"running standalone programs to test extra credit operations" 
. 
"running java DynamicChangeMaker 8,13,4,9 14" 
. 
"running java DynamicChangeMaker 2,3 5" 
. 
"running java DynamicChangeMaker 2,3,7,5,51,29,11 13579" 
. 
"running java DynamicChangeMaker 17,23,121,47,3 13579" 
. 
"running java DynamicChangeMaker 1,7,9 12" 
. 
"running java DynamicChangeMaker 11,13,17,19,23 1357911" 
. 
"running java DynamicChangeMaker 23,19,17,13,11 1357911" 
. 
"running java DynamicChangeMaker 3,1,9,8 14" 
. 
"running java DynamicChangeMaker 3" 
. 
"running java DynamicChangeMaker 3,12 -4" 
BAD DATA! Must input 2 arguments. Must be non-repeating, non-negative integers
. 
"running java DynamicChangeMaker 0,12,3 63" 
BAD DATA! Must input 2 arguments. Must be non-repeating, non-negative integers
. 
"running java DynamicChangeMaker 10,12,3,12 63" 
BAD DATA! Must input 2 arguments. Must be non-repeating, non-negative integers
. 
. 
...........done.............. 
. 
